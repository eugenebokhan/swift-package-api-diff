// swift-interface-format-version: 1.0
// swift-compiler-version: Swift version 5.3-dev (LLVM c377dba73da1364, Swift 4419f879adac304)
// swift-module-flags: -disable-objc-attr-requires-foundation-module -target x86_64-apple-macosx10.9 -enable-objc-interop -enable-library-evolution -module-link-name swiftSwiftPrivate -parse-stdlib -swift-version 5 -O -enforce-exclusivity=unchecked -module-name SwiftPrivate
import Swift
import SwiftShims
public func asHex<T>(_ x: T) -> Swift.String where T : Swift.FixedWidthInteger
public func asHex<S>(_ x: S) -> Swift.String where S : Swift.Sequence, S.Element : Swift.FixedWidthInteger
public func scan<S, U>(_ seq: S, _ initial: U, _ combine: (U, S.Element) -> U) -> [U] where S : Swift.Sequence
public func gather<C, IndicesSequence>(_ collection: C, _ indices: IndicesSequence) -> [C.Element] where C : Swift.Collection, IndicesSequence : Swift.Sequence, C.Index == IndicesSequence.Element
public func scatter<T>(_ a: [T], _ idx: [Swift.Int]) -> [T]
public func withArrayOfCStrings<R>(_ args: [Swift.String], _ body: ([Swift.UnsafeMutablePointer<Swift.CChar>?]) -> R) -> R
public struct _FDInputStream {
  public let fd: Swift.CInt
  public var isClosed: Swift.Bool
  public var isEOF: Swift.Bool
  public init(fd: Swift.CInt)
  public mutating func getline() -> Swift.String?
  public mutating func read()
  public mutating func close()
}
public struct _Stderr : Swift.TextOutputStream {
  public init()
  public mutating func write(_ string: Swift.String)
}
public struct _FDOutputStream : Swift.TextOutputStream {
  public let fd: Swift.CInt
  public var isClosed: Swift.Bool
  public init(fd: Swift.CInt)
  public mutating func write(_ string: Swift.String)
  public mutating func close()
}
public func _stdlib_getHardwareConcurrency() -> Swift.Int
public struct _stdlib_ShardedAtomicCounter {
  public init()
  public func `deinit`()
  public func add(_ operand: Swift.Int, randomInt: Swift.Int)
  public func getSum() -> Swift.Int
  public struct PRNG {
    public init()
    public mutating func randomInt() -> Swift.Int
  }
}
@available(swift 5.0)
final public class _stdlib_AtomicInt {
  public init(_ value: Swift.Int = 0)
  final public func store(_ desired: Swift.Int)
  final public func load() -> Swift.Int
  @discardableResult
  final public func fetchAndAdd(_ operand: Swift.Int) -> Swift.Int
  final public func addAndFetch(_ operand: Swift.Int) -> Swift.Int
  @discardableResult
  final public func fetchAndAnd(_ operand: Swift.Int) -> Swift.Int
  final public func andAndFetch(_ operand: Swift.Int) -> Swift.Int
  @discardableResult
  final public func fetchAndOr(_ operand: Swift.Int) -> Swift.Int
  final public func orAndFetch(_ operand: Swift.Int) -> Swift.Int
  @discardableResult
  final public func fetchAndXor(_ operand: Swift.Int) -> Swift.Int
  final public func xorAndFetch(_ operand: Swift.Int) -> Swift.Int
  final public func compareExchange(expected: inout Swift.Int, desired: Swift.Int) -> Swift.Bool
  @objc deinit
}
